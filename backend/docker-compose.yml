version: '3.9'

services:
  # ------------------ PostgreSQL cho Auth ------------------
  postgres-auth:
    image: postgres:15
    container_name: postgres-auth
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auth_db
    ports:
      - "5433:5432"
    volumes:
      - auth_pgdata:/var/lib/postgresql/data

  # ------------------ Auth Service ------------------
  auth-service:
    build: ./auth-service
    container_name: auth-service
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - postgres-auth
    env_file:
      - ./auth-service/.env
    volumes:
      - ./auth-service:/usr/src/app
    working_dir: /usr/src/app
    command: npm run start:dev

  # ---------- PostgreSQL cho User ----------
  postgres-user:
    image: postgres:15
    container_name: postgres-user
    restart: always
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"
    volumes:
      - pgdata-user:/var/lib/postgresql/data

  # ---------- User Service ----------
  user-service:
    build: ./user-service
    container_name: user-service
    restart: always
    ports:
      - "3001:3000"
    depends_on:
      - postgres-user
    env_file:
      - ./user-service/.env
    volumes:
      - ./user-service:/app
    working_dir: /app
    command: npm run start:dev

  # ===================== API Gateway =====================
  gateway:
    build: ./gateway
    container_name: api-gateway
    restart: always
    depends_on:
      - auth-service
      - user-service
      - catalog-service
    env_file:
      - ./gateway/.env # PORT, AUTH_SERVICE_URL, USER_SERVICE_URL
    ports:
      - "8080:8080"
    volumes:
      - ./gateway:/app
    working_dir: /app
    command: npm run start:dev

  # ---------- MongoDB for Catalog----------
  mongo-catalog:
    image: mongo
    container_name: mongo-catalog
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - catalog-mongo-data:/data/db

  # ---------- Catalog Service ----------
  catalog-service:
    build: ./catalog-service
    container_name: catalog-service
    restart: always
    ports:
      - "3002:3000"
    depends_on:
      - mongo-catalog
    env_file:
      - ./catalog-service/.env
    volumes:
      - ./catalog-service:/app
    working_dir: /app
    command: npm run start:dev

  # ------------------ MongoDB for Order Service ------------------
  mongo-order:
    image: mongo
    container_name: mongo-order
    restart: always
    ports:
      - '27018:27017' # external port:internal port
    volumes:
      - mongo-order-data:/data/db

  # ------------------ Order Service ------------------
  order-service:
    build: ./order-service
    container_name: order-service
    restart: always
    ports:
      - '3003:3000'
    depends_on:
      - mongo-order
    env_file:
      - ./order-service/.env
    volumes:
      - ./order-service:/app
    working_dir: /app
    command: npm run start:dev

    # ===================== Prometheus =====================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: always

  # ===================== Grafana =====================
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3005:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: always
volumes:
  auth_pgdata:
  pgdata-user:
  catalog-mongo-data:
  mongo-order-data:
  grafana-data:
