backend/
  shared/
    rmq/
      rmq.constants.ts
      rmq.module.ts
  order-service/
    src/
      main.ts
      order.module.ts
      order.service.ts
    package.json
    tsconfig.json
    tsconfig.build.json
    Dockerfile.dev
  docker-compose.yml
-------
npx tsc --noEmit : checkerror 
--------------------------
Cài NestJS CLI
npm i -g @nestjs/cli



Khởi tạo NestJS project cho từng service
nest new user-service

user-service, kết nối PostgreSQL qua TypeORM
npm install @nestjs/typeorm typeorm pg

product-service kết nối MongoDB:
npm install @nestjs/mongoose mongoose

Validation + Env config
npm install class-validator class-transformer
npm install @nestjs/config

Bật Swagger UI (docs)
npm i @nestjs/swagger swagger-ui-express

npm install @nestjs/jwt passport-jwt

http 
npm i @nestjs/axios axios rxjs

catelog service
npm i @nestjs/mongoose mongoose @nestjs/microservices @nestjs/config class-validator class-transformer slugify

---
npm install @willsoto/nestjs-prometheus prom-client
---

-----------------------
 RSA public/private key

 Cách tạo key (chọn 1)
OpenSSL (phổ biến):
openssl rand -hex 32
# hoặc
openssl rand -base64 32

 ------------------------------------
access database on docker
docker exec -it postgres-user psql -U postgres -d user_db

giải phóng dung lượng Docker
# Xóa image/container/network/volume không dùng Dọn ổ đĩa Docker
docker system prune -af --volumes

# (tuỳ chọn) dọn cache buildkit
docker builder prune -af


--------------------------------
-----Catalog
npm i class-validator @nestjs/swagger @nestjs/mapped-types slugify
------

auth-service and user-service via http or gRPC or messaging (RabbitMQ, Kafka)
1. Auth-Service
register
  http://localhost:3000/auth/register
  {
  "email": "test@example.com",
  "password": "123456",
  "fullName": "test"
    }

login
    http://localhost:3000/auth/login
  {
  "email": "test@example.com",
  "password": "123456",
  "fullName": "test"
    }

2. User-Service

-----------------MOngodb
# Xác định container MongoDB
docker ps | grep mongo

# Vào shell mongo (thay CONTAINER_ID)
docker exec -it CONTAINER_ID mongosh

# Trong mongosh:
show dbs
use your_db_name
show collections
db.your_collection.find().limit(5)
db.your_collection.findOne()
db.your_collection.find().pretty()  
----------------------------

Tesst

--------------order service 

docker logs order-service

curl 'http://localhost:8080/products/' 
curl 'http://localhost:8080/categories/' 
curl http://localhost:3003/orders

docker exec -it mongo-order mongosh
use order_db
db.orders.find().pretty()


3. RabbitMQ 
npm install @nestjs/microservices amqplib
npm install amqp-connection-manager amqplib


--------
Mục tiêu của cách này

shared/ chứa code dùng chung: constants, DTOs, module, util...

Mỗi microservice (order-service, auth-service, ...) sẽ import từ @shared/* như một module thực sự.

Build xong → Node.js runtime chạy JS trong dist, không phụ thuộc vào alias của TypeScript nữa.

2. Cách mình đang làm thuộc dạng nào?

Nó là cách “local shared library”:
TypeScript compile src + shared → dist

Node runtime chạy từ dist → hết lỗi MODULE_NOT_FOUND

Thay vì publish shared lên npm riêng, ta copy shared vào container khi build, compile nó cùng service → tất cả nằm trong dist.

Dùng tsconfig.json paths để TypeScript hiểu alias @shared/* trong lúc compile.

Cuối cùng, runtime chỉ chạy JS trong dist → không lỗi MODULE_NOT_FOUND.
3. So sánh với các cách khác
Cách	Ưu điểm	Nhược điểm	Dùng khi nào
Local shared (cách hiện tại)	Dễ setup, build 1 lần chạy ngay	Không reuse giữa dự án khác	Microservices trong 1 repo
npm private package	Quản lý version, dùng nhiều project	Cần publish package mỗi lần update	Nhiều repo, team lớn
Monorepo với Nx/Turbo	Tối ưu build, cache, dependency graph	Học thêm tool, cấu hình phức tạp hơn	Monorepo lớn, CI/CD chuẩn
4. Lợi thế của cách này

Đơn giản: chỉ cần Dockerfile + tsconfig chuẩn là chạy được.

Không phải publish package riêng.

Hợp với team nhỏ, 1 repo nhiều microservice.


----------
const products = [
  {
    name: 'Bút bi Thiên Long',
    slug: 'but-bi-thien-long',
    price: 12000,
    description: 'Bút bi màu xanh, thương hiệu Thiên Long.',
    category: 'stationery',
    tags: ['bút', 'thiên long', 'học sinh'],
    images: ['https://example.com/images/pen1.jpg'],
    isActive: true,
  },
  {
    name: 'Vở học sinh Campus',
    slug: 'vo-campus',
    price: 18000,
    description: 'Vở 96 trang, giấy dày, không lem.',
    category: 'stationery',
    tags: ['vở', 'campus', 'học sinh'],
    images: ['https://example.com/images/notebook.jpg'],
    isActive: true,
  },
  {
    name: 'Thước kẻ 20cm',
    slug: 'thuoc-ke-20cm',
    price: 5000,
    description: 'Thước kẻ nhựa, 20cm.',
    category: 'stationery',
    tags: ['thước', 'dụng cụ học tập'],
    images: ['https://example.com/images/ruler.jpg'],
    isActive: true,
  }
];
