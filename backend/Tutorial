-------
npx tsc --noEmit : checkerror 
--------------------------
Cài NestJS CLI
npm i -g @nestjs/cli



Khởi tạo NestJS project cho từng service
nest new user-service

user-service, kết nối PostgreSQL qua TypeORM
npm install @nestjs/typeorm typeorm pg

product-service kết nối MongoDB:
npm install @nestjs/mongoose mongoose

Validation + Env config
npm install class-validator class-transformer
npm install @nestjs/config

Bật Swagger UI (docs)
npm i @nestjs/swagger swagger-ui-express

npm install @nestjs/jwt passport-jwt

http 
npm i @nestjs/axios axios rxjs

catelog service
npm i @nestjs/mongoose mongoose @nestjs/microservices @nestjs/config class-validator class-transformer slugify

---
npm install @willsoto/nestjs-prometheus prom-client
---

-----------------------
 RSA public/private key

 Cách tạo key (chọn 1)
OpenSSL (phổ biến):
openssl rand -hex 32
# hoặc
openssl rand -base64 32

 ------------------------------------
access database on docker
docker exec -it postgres-user psql -U postgres -d user_db

giải phóng dung lượng Docker
# Xóa image/container/network/volume không dùng Dọn ổ đĩa Docker
docker system prune -af --volumes

# (tuỳ chọn) dọn cache buildkit
docker builder prune -af


--------------------------------
-----Catalog
npm i class-validator @nestjs/swagger @nestjs/mapped-types slugify
------

auth-service and user-service via http or gRPC or messaging (RabbitMQ, Kafka)
1. Auth-Service
register
  http://localhost:3000/auth/register
  {
  "email": "test@example.com",
  "password": "123456",
  "fullName": "test"
    }

login
    http://localhost:3000/auth/login
  {
  "email": "test@example.com",
  "password": "123456",
  "fullName": "test"
    }

2. User-Service

-----------------MOngodb
# Xác định container MongoDB
docker ps | grep mongo

# Vào shell mongo (thay CONTAINER_ID)
docker exec -it CONTAINER_ID mongosh

# Trong mongosh:
show dbs
use your_db_name
show collections
db.your_collection.find().limit(5)
db.your_collection.findOne()
db.your_collection.find().pretty()  
----------------------------

Tesst

--------------order service 

docker logs order-service

curl 'http://localhost:8080/products/' 
curl 'http://localhost:8080/categories/' 
curl http://localhost:3003/orders

docker exec -it mongo-order mongosh
use order_db
db.orders.find().pretty()